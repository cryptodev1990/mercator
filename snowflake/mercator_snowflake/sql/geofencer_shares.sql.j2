{#- Script to setup Snowflake data sharing for an account.

Requires the organization id (in the organziations table) and
the Snowflake account id of the organization.

Jinja templated Snowflake SQL.

-#}
{%- set db_name = 'org_' ~ org_id_safe %}
{%- set share_name = db_name  ~ "_share" %}
{%- set full_schema_name = db_name ~ '.geofencer' %}

USE ROLE geofencer_etl_role;

CREATE DATABASE IF NOT EXISTS {{ db_name }};

COMMENT ON DATABASE {{ db_name }} IS $$Database containing exported data for organization {{ org_id }}.$$;

CREATE SCHEMA IF NOT EXISTS {{ full_schema_name }};

COMMENT ON SCHEMA {{ full_schema_name }} IS $$Schema conatainging geofencer exported shapes for organization {{ org_id }}$$;

{%- set shapes_exports_table = full_schema_name ~ ".shapes_exports" %}
CREATE OR REPLACE TABLE {{ shapes_exports_table }} (
    uuid TEXT PRIMARY KEY NOT NULL COMMENT $$Shape ID. This is a UUID.$$,
    name TEXT COMMENT $$Shape name$$,
    geom GEOGRAPHY COMMENT $$Shape geography.$$,
    properties OBJECT COMMENT $$Shape metadata added by the user.$$,
    created_at TIMESTAMP_NTZ(9) COMMENT $$Shape creation time$$,
    updated_at TIMESTAMP_NTZ(9) COMMENT $$Shape updated time$$,
    exported_at TIMESTAMP_NTZ(9) COMMENT $$Exported time$$,
    deleted_at TIMESTAMP_NTZ(9) COMMENT $$Deleted at time. If not `NULL`, then this shape has been deleted.$$,
    organization_id TEXT COMMENT $$Organization id$$,
    export_id TEXT COMMENT $$A unique identifier of an export even comprising the export time and a random string. All shapes with the same export ID were exported at the same time.$$
);

COMMENT ON TABLE {{ shapes_exports_table }} IS $$All shapes exported from geofencer for organization {{ org_id }}.$$;

{%- set shapes_stage = full_schema_name ~ ".shapes_stage" %}
CREATE OR REPLACE STAGE {{ shapes_stage }}
{#- make sure aws_s3_url does not end with / #}
URL = '{{ aws_s3_url }}{{ org_id }}/'
{#- storage integration needs to be defined elsewhere and role has to have usage privileges #}
STORAGE_INTEGRATION = s3_int
FILE_FORMAT=(TYPE=parquet COMPRESSION=snappy BINARY_AS_TEXT=false);

COMMENT ON STAGE {{ shapes_stage}} IS $$Staging location of exported files with geofencer shapes for organization {{ org_id }}$$;

{%- set shapes_pipe = full_schema_name ~ ".shapes_pipe" %}
CREATE OR REPLACE PIPE {{ shapes_pipe }}
AUTO_INGEST=TRUE
AS
COPY INTO {{ shapes_exports_table }}
(uuid, name, geom, properties, created_at, updated_at, deleted_at, exported_at, organization_id, export_id)
FROM (
    SELECT
        $1:uuid::TEXT,
        $1:name::TEXT,
        -- geo is stored in wkb format
        st_geographyfromwkb($1:geom::BINARY),
        coalesce(parse_json($1:properties::TEXT)::OBJECT, object_construct()),
        -- this seems to work for reading timestamps from parquet.
        -- the scale is important - the wrong scale
        to_timestamp_ntz($1:created_at::INT, 6),
        to_timestamp_ntz($1:updated_at::INT, 6),
        to_timestamp_ntz($1:deleted_at::INT, 6),
        to_timestamp_ntz($1:exported_at::INT, 6),
        $1:organization_id::TEXT,
        $1:export_id::TEXT
    FROM @{{ shapes_stage }}
)
{#- binary_as_text=false is necessary to read the wkb column without errors
    otherwise the binary column will be treated as a text column #}
FILE_FORMAT=(TYPE=parquet COMPRESSION=snappy BINARY_AS_TEXT=false);

COMMENT ON PIPE {{ shapes_pipe }} IS $$Pipe to load new geofencer shape exports of organization {{ org_id }}.$$;

{%- set shapes_view = full_schema_name ~ ".shapes" %}
CREATE OR REPLACE SECURE VIEW {{ shapes_view }}
AS
SELECT
    uuid,
    name,
    geom,
    properties,
    updated_at,
    deleted_at,
    exported_at
FROM {{ shapes_exports_table }}
{#- max(export_id) works to get latest exported shapes because export_id begins with partitioned
   export time in reverse time part order (padded with zeros) #}
WHERE export_id = (SELECT max(export_id) FROM {{ shapes_exports_table }});

COMMENT ON VIEW {{ shapes_view }} IS $$S3 Location of geofencer exports for organization {{ org_id }}$$;

{%- set shapes_view = full_schema_name ~ ".shapes" %}
CREATE OR REPLACE SECURE VIEW {{ shapes_view }}
AS
SELECT
    uuid,
    name,
    geom,
    properties,
    updated_at,
    deleted_at,
    exported_at
FROM {{ shapes_exports_table }}
{#- max(export_id) works to get latest exported shapes because export_id begins with partitioned
   export time in reverse time part order (padded with zeros) #}
WHERE export_id = (SELECT max(export_id) FROM {{ shapes_exports_table }});

{# Cleanup
DROP SHARE {{ share_name }}; -- cannot drop database until any shares using it are dropped
DROP DATABASE {{ db_name }}; -- this will drop everything in the database
#}

{# Create sharing #}
{# create share if not exists - there is only create or replace share, or  #}
CREATE SHARE {{ share_name }};

COMMENT ON SHARE  {{ share_name }} IS $$Shared geofencer exports for organization {{ org_id }}$$;

GRANT USAGE ON DATABASE {{ db_name }} TO SHARE {{ share_name }};

GRANT USAGE ON SCHEMA {{ full_schema_name }} TO SHARE {{ share_name }};

GRANT SELECT ON ALL TABLES IN SCHEMA {{ full_schema_name }} TO SHARE {{ share_name }};

GRANT SELECT ON VIEW {{ shapes_view }} TO SHARE {{ share_name }};

ALTER SHARE {{ share_name }} ADD ACCOUNTS = {{ snowflake_account_id }};
