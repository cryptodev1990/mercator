polygon-blocks:
  connection_type: "bigquery"
  ddl: |
    -- A table for each wallet
    CREATE TABLE `bigquery-public-data.crypto_polygon.tokens` ( address STRING NOT NULL, symbol STRING, name STRING, decimals STRING, total_supply STRING, block_timestamp TIMESTAMP NOT NULL, block_number INT64 NOT NULL, block_hash STRING NOT NULL);
    -- A table for the blocks associated with this cryptocurrency
    CREATE TABLE `bigquery-public-data.crypto_polygon.blocks` ( timestamp TIMESTAMP NOT NULL, number INT64 NOT NULL, hash STRING NOT NULL, parent_hash STRING, nonce STRING NOT NULL, sha3_uncles STRING, logs_bloom STRING, transactions_root STRING, state_root STRING, receipts_root STRING, miner STRING, difficulty NUMERIC, total_difficulty NUMERIC, size INT64, gas_limit INT64, gas_used INT64, transactions_count INT64, uncles_count INT64);
    CREATE TABLE `bigquery-public-data.crypto_polygon.logs` ( block_number INT64 NOT NULL, block_hash STRING NOT NULL, transaction_hash STRING NOT NULL, address STRING NOT NULL, data STRING, topics ARRAY<STRING>);
    -- A table of transactions between wallets
    CREATE TABLE `bigquery-public-data.crypto_polygon.transactions` ( block_number INT64 NOT NULL, block_hash STRING NOT NULL, hash STRING NOT NULL, from_address STRING NOT NULL, to_address STRING, value NUMERIC, gas INT64, gas_price NUMERIC, input STRING, nonce INT64, transaction_index INT64, v INT64, r STRING, s STRING);
    CREATE TABLE `bigquery-public-data.crypto_polygon.token_transfers` ( token_address STRING, from_address STRING, to_address STRING, value NUMERIC, transaction_hash STRING, log_index INT64, block_timestamp TIMESTAMP, block_number INT64, block_hash STRING);
    -- A table of conversion rates to US Dollars
    CREATE TABLE `dubo-375020.crypto.matic_to_usd` (Date DATE, Open FLOAT, High FLOAT, Low FLOAT, Close FLOAT, Adj_Close FLOAT, Volume INTEGER);
bitcoin-blocks:
  connection_type: "bigquery"
  ddl: |
    -- A table of cryptocurrency transactions on the Bitcoin (BTC) blockchain
    CREATE TABLE `bigquery-public-data.crypto_bitcoin.transactions` (
      hash STRING,                -- The hash of this transaction
      version INT64,              -- Protocol version specified in block which contained this transaction
      block_hash STRING,          -- Hash of the block which contains this transaction
      block_number INT64,         -- Number of the block which contains this transaction
      block_timestamp TIMESTAMP,  -- Timestamp of the block which contains this transaction
      block_timestamp_month DATE, -- Month of the block which contains this transaction
      input_count INT64,          -- Number of inputs in the transaction
      output_count INT64,         -- Number of outputs in the transaction
      input_value NUMERIC,        -- Value of inputs in the transaction
      output_value NUMERIC,       -- Value of outputs in the transaction
      is_coinbase BOOL,           -- If this transaction is a Coinbase transaction
      fee NUMERIC                -- Fee paid by this transaction
    );
bitcoin-exchange:
  connection_type: "bigquery"
  ddl: |
    -- A table of BTC-USD exchange rates aggregated by day
    CREATE TABLE `dubo-375020.crypto.btc_to_usd` (
      Date DATE,       -- UTC timestamp indicating the day of interest e.g. `2020-01-01 00:00:00`
      Open FLOAT,      -- Opening price one Bitcoin in US Dollars
      High FLOAT,      -- Highest trading price for one Bitcoin in US Dollars in that day
      Low FLOAT,       -- Lowest trading price for one Bitcoin in US Dollars in that day
      Close FLOAT,     -- Close price for one Bitcoin in US Dollars
      Adj_Close FLOAT, -- Adjusted close price
      Volume INTEGER   -- Volume of trading that day
    );
ethereum-blocks:
  connection_type: "bigquery"
  ddl: |
    CREATE TABLE `bigquery-public-data.crypto_ethereum.tokens`
    (
      address STRING NOT NULL OPTIONS(description="The address of the ERC20 token"),
      symbol STRING OPTIONS(description="The symbol of the ERC20 token"),
      name STRING OPTIONS(description="The name of the ERC20 token"),
      decimals STRING OPTIONS(description="The number of decimals the token uses. Use safe_cast for casting to NUMERIC or FLOAT64"),
      total_supply STRING OPTIONS(description="The total token supply. Use safe_cast for casting to NUMERIC or FLOAT64"),
      block_timestamp TIMESTAMP NOT NULL OPTIONS(description="Timestamp of the block where this token was created"),
      block_number INT64 NOT NULL OPTIONS(description="Block number where this token was created"),
      block_hash STRING NOT NULL OPTIONS(description="Hash of the block where this token was created")
    )
    OPTIONS(
      description="Token data.\nData is exported using https://github.com/medvedev1088/ethereum-etl"
    );
    CREATE TABLE `bigquery-public-data.crypto_ethereum.blocks`
    (
      timestamp TIMESTAMP NOT NULL OPTIONS(description="The timestamp for when the block was collated"),
      number INT64 NOT NULL OPTIONS(description="The block number"),
      `hash` STRING NOT NULL OPTIONS(description="Hash of the block"),
      parent_hash STRING OPTIONS(description="Hash of the parent block"),
      nonce STRING NOT NULL OPTIONS(description="Hash of the generated proof-of-work"),
      sha3_uncles STRING OPTIONS(description="SHA3 of the uncles data in the block"),
      logs_bloom STRING OPTIONS(description="The bloom filter for the logs of the block"),
      transactions_root STRING OPTIONS(description="The root of the transaction trie of the block"),
      state_root STRING OPTIONS(description="The root of the final state trie of the block"),
      receipts_root STRING OPTIONS(description="The root of the receipts trie of the block"),
      miner STRING OPTIONS(description="The address of the beneficiary to whom the mining rewards were given"),
      difficulty NUMERIC OPTIONS(description="Integer of the difficulty for this block"),
      total_difficulty NUMERIC OPTIONS(description="Integer of the total difficulty of the chain until this block"),
      size INT64 OPTIONS(description="The size of this block in bytes"),
      extra_data STRING OPTIONS(description="The extra data field of this block"),
      gas_limit INT64 OPTIONS(description="The maximum gas allowed in this block"),
      gas_used INT64 OPTIONS(description="The total used gas by all transactions in this block"),
      transaction_count INT64 OPTIONS(description="The number of transactions in the block"),
      base_fee_per_gas INT64 OPTIONS(description="Protocol base fee per gas, which can move up or down")
    )
    PARTITION BY DATE(timestamp)
    OPTIONS(
      description="The Ethereum blockchain is composed of a series of blocks. This table contains a set of all blocks in the blockchain and their attributes.\nData is exported using https://github.com/medvedev1088/ethereum-etl"
    );
    CREATE TABLE `bigquery-public-data.crypto_ethereum.contracts`
    (
      address STRING NOT NULL OPTIONS(description="Address of the contract"),
      bytecode STRING OPTIONS(description="Bytecode of the contract"),
      function_sighashes ARRAY<STRING> OPTIONS(description="4-byte function signature hashes"),
      is_erc20 BOOL OPTIONS(description="Whether this contract is an ERC20 contract"),
      is_erc721 BOOL OPTIONS(description="Whether this contract is an ERC721 contract"),
      block_timestamp TIMESTAMP NOT NULL OPTIONS(description="Timestamp of the block where this contract was created"),
      block_number INT64 NOT NULL OPTIONS(description="Block number where this contract was created"),
      block_hash STRING NOT NULL OPTIONS(description="Hash of the block where this contract was created")
    )
    PARTITION BY DATE(block_timestamp)
    OPTIONS(
      description="Some transactions create smart contracts from their input bytes, and this smart contract is stored at a particular 20-byte address.\nThis table contains a subset of Ethereum addresses that contain contract byte-code, as well as some basic analysis of that byte-code.\nData is exported using https://github.com/medvedev1088/ethereum-etl"
    );
    CREATE TABLE `bigquery-public-data.crypto_ethereum.traces`
    (
      transaction_hash STRING OPTIONS(description="Transaction hash where this trace was in"),
      transaction_index INT64 OPTIONS(description="Integer of the transactions index position in the block"),
      from_address STRING OPTIONS(description="Address of the sender, null when trace_type is genesis or reward"),
      to_address STRING OPTIONS(description="Address of the receiver if trace_type is call, address of new contract or null if trace_type is create, beneficiary address if trace_type is suicide, miner address if trace_type is reward, shareholder address if trace_type is genesis, WithdrawDAO address if trace_type is daofork"),
      value NUMERIC OPTIONS(description="Value transferred in Wei"),
      input STRING OPTIONS(description="The data sent along with the message call"),
      output STRING OPTIONS(description="The output of the message call, bytecode of contract when trace_type is create"),
      trace_type STRING NOT NULL OPTIONS(description="One of call, create, suicide, reward, genesis, daofork"),
      call_type STRING OPTIONS(description="One of call, callcode, delegatecall, staticcall"),
      reward_type STRING OPTIONS(description="One of block, uncle"),
      gas INT64 OPTIONS(description="Gas provided with the message call"),
      gas_used INT64 OPTIONS(description="Gas used by the message call"),
      subtraces INT64 OPTIONS(description="Number of subtraces"),
      trace_address STRING OPTIONS(description="Comma separated list of trace address in call tree"),
      error STRING OPTIONS(description="Error if message call failed. This field doesn't contain top-level trace errors."),
      status INT64 OPTIONS(description="Either 1 (success) or 0 (failure, due to any operation that can cause the call itself or any top-level call to revert)"),
      block_timestamp TIMESTAMP NOT NULL OPTIONS(description="Timestamp of the block where this trace was in"),
      block_number INT64 NOT NULL OPTIONS(description="Block number where this trace was in"),
      block_hash STRING NOT NULL OPTIONS(description="Hash of the block where this trace was in"),
      trace_id STRING OPTIONS(description="Unique string that identifies the trace. For transaction-scoped traces it is {trace_type}_{transaction_hash}_{trace_address}. For block-scoped traces it is {trace_type}_{block_number}_{index_within_block}")
    )
    PARTITION BY DATE(block_timestamp)
    OPTIONS(
      description="Traces exported using Parity trace module https://wiki.parity.io/JSONRPC-trace-module.\nData is exported using https://github.com/medvedev1088/ethereum-etl\n"
    );
    CREATE TABLE `bigquery-public-data.crypto_ethereum.token_transfers`
    (
      token_address STRING NOT NULL OPTIONS(description="ERC20 token address"),
      from_address STRING OPTIONS(description="Address of the sender"),
      to_address STRING OPTIONS(description="Address of the receiver"),
      value STRING OPTIONS(description="Amount of tokens transferred (ERC20) / id of the token transferred (ERC721). Use safe_cast for casting to NUMERIC or FLOAT64"),
      transaction_hash STRING NOT NULL OPTIONS(description="Transaction hash"),
      log_index INT64 NOT NULL OPTIONS(description="Log index in the transaction receipt"),
      block_timestamp TIMESTAMP NOT NULL OPTIONS(description="Timestamp of the block where this transfer was in"),
      block_number INT64 NOT NULL OPTIONS(description="Block number where this transfer was in"),
      block_hash STRING NOT NULL OPTIONS(description="Hash of the block where this transfer was in")
    )
    PARTITION BY DATE(block_timestamp)
    OPTIONS(
      description="The most popular type of transaction on the Ethereum blockchain invokes a contract of type ERC20 to perform a transfer operation, moving some number of tokens from one 20-byte address to another 20-byte address.\nThis table contains the subset of those transactions and has further processed and denormalized the data to make it easier to consume for analysis of token transfer events.\nData is exported using https://github.com/medvedev1088/ethereum-etl\n"
    );
    CREATE TABLE `bigquery-public-data.crypto_ethereum.balances`
    (
      address STRING NOT NULL OPTIONS(description="Address"),
      eth_balance NUMERIC OPTIONS(description="Ether balance")
    )
    OPTIONS(
      description="This table contains Ether balances of all addresses, updated daily.\nData is exported using https://github.com/medvedev1088/ethereum-etl"
    );
    CREATE TABLE `bigquery-public-data.crypto_ethereum.transactions`
    (
      `hash` STRING NOT NULL OPTIONS(description="Hash of the transaction"),
      nonce INT64 NOT NULL OPTIONS(description="The number of transactions made by the sender prior to this one"),
      transaction_index INT64 NOT NULL OPTIONS(description="Integer of the transactions index position in the block"),
      from_address STRING NOT NULL OPTIONS(description="Address of the sender"),
      to_address STRING OPTIONS(description="Address of the receiver. null when its a contract creation transaction"),
      value NUMERIC OPTIONS(description="Value transferred in Wei"),
      gas INT64 OPTIONS(description="Gas provided by the sender"),
      gas_price INT64 OPTIONS(description="Gas price provided by the sender in Wei"),
      input STRING OPTIONS(description="The data sent along with the transaction"),
      receipt_cumulative_gas_used INT64 OPTIONS(description="The total amount of gas used when this transaction was executed in the block"),
      receipt_gas_used INT64 OPTIONS(description="The amount of gas used by this specific transaction alone"),
      receipt_contract_address STRING OPTIONS(description="The contract address created, if the transaction was a contract creation, otherwise null"),
      receipt_root STRING OPTIONS(description="32 bytes of post-transaction stateroot (pre Byzantium)"),
      receipt_status INT64 OPTIONS(description="Either 1 (success) or 0 (failure) (post Byzantium)"),
      block_timestamp TIMESTAMP NOT NULL OPTIONS(description="Timestamp of the block where this transaction was in"),
      block_number INT64 NOT NULL OPTIONS(description="Block number where this transaction was in"),
      block_hash STRING NOT NULL OPTIONS(description="Hash of the block where this transaction was in"),
      max_fee_per_gas INT64 OPTIONS(description="Total fee that covers both base and priority fees"),
      max_priority_fee_per_gas INT64 OPTIONS(description="Fee given to miners to incentivize them to include the transaction"),
      transaction_type INT64 OPTIONS(description="Transaction type"),
      receipt_effective_gas_price INT64 OPTIONS(description="The actual value per gas deducted from the senders account. Replacement of gas_price after EIP-1559")
    )
    PARTITION BY DATE(block_timestamp)
    OPTIONS(
      description="Each block in the blockchain is composed of zero or more transactions. Each transaction has a source address, a target address, an amount of Ether transferred, and an array of input bytes.\nThis table contains a set of all transactions from all blocks, and contains a block identifier to get associated block-specific information associated with each transaction.\nData is exported using https://github.com/medvedev1088/ethereum-etl\n"
    );
    CREATE TABLE `bigquery-public-data.crypto_ethereum.sessions`
    (
      id STRING NOT NULL,
      start_trace_id STRING NOT NULL,
      start_block_number INT64 NOT NULL,
      start_block_timestamp TIMESTAMP NOT NULL,
      wallet_address STRING NOT NULL,
      contract_address STRING
    );
    CREATE TABLE `bigquery-public-data.crypto_ethereum.logs`
    (
      log_index INT64 NOT NULL OPTIONS(description="Integer of the log index position in the block"),
      transaction_hash STRING NOT NULL OPTIONS(description="Hash of the transactions this log was created from"),
      transaction_index INT64 NOT NULL OPTIONS(description="Integer of the transactions index position log was created from"),
      address STRING OPTIONS(description="Address from which this log originated"),
      data STRING OPTIONS(description="Contains one or more 32 Bytes non-indexed arguments of the log"),
      topics ARRAY<STRING> OPTIONS(description="Indexed log arguments (0 to 4 32-byte hex strings). (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.)),
      block_timestamp TIMESTAMP NOT NULL OPTIONS(description="Timestamp of the block where this log was in"),
      block_number INT64 NOT NULL OPTIONS(description="The block number where this log was in"),
      block_hash STRING NOT NULL OPTIONS(description="Hash of the block where this log was in")
    )
    PARTITION BY DATE(block_timestamp)
    OPTIONS(
      description="Similar to the token_transfers table, the logs table contains data for smart contract events. However, it contains all log data, not only ERC20 token transfers.\nThis table is generally useful for reporting on any logged event type on the Ethereum blockchain.\nData is exported using https://github.com/blockchain-etl/ethereum-etl"
    );
    CREATE VIEW `bigquery-public-data.crypto_ethereum.amended_tokens`
    OPTIONS(
      description="Token amended with data from https://github.com/blockchain-etl/ethereum-etl-airflow/blob/master/dags/resources/stages/seed/data/token_amendments.csv"
    )
    AS WITH tokens AS (
        -- Deduplicate first since the tokens table might have duplicate entries due to CREATE2 https://medium.com/@jason.carver/defend-against-wild-magic-in-the-next-ethereum-upgrade-b008247839d2
        SELECT 
            address,
            ANY_VALUE(symbol) AS symbol,
            ANY_VALUE(name) AS name,
            ANY_VALUE(decimals) AS decimals,
        FROM `bigquery-public-data.crypto_ethereum.tokens`
        GROUP BY address
    ),
    deduplicated_token_amendments AS (
        -- Deduplicate first since token_amendments can have human errors
        SELECT
            address,
            ANY_VALUE(symbol) AS symbol,
            ANY_VALUE(name) AS name,
            ANY_VALUE(decimals) AS decimals,
        FROM `blockchain-etl-internal.common.token_amendments`
        GROUP BY address
    )
    SELECT 
        LOWER(address) AS address,
        COALESCE(am.symbol, tokens.symbol) AS symbol,
        COALESCE(am.name, tokens.name) AS name,
        COALESCE(am.decimals, tokens.decimals) AS decimals,
    FROM
      deduplicated_token_amendments AS am
    FULL OUTER JOIN
      tokens
    USING(address)
    ;
    CREATE TABLE `dubo-375020.crypto.eth_to_usd` (Date DATE, Open FLOAT, High FLOAT, Low FLOAT, Close FLOAT, Adj_Close FLOAT, Volume INTEGER);
acs-zctas:
  connection_type: "postgres"
  connection_mode: "mercator-managed"
  query_mode: "one_table"
  prompt_addendum: "Include the `zcta` column. All columns in the final output must have aliases. Each row is unique on the ZIP code column. Prefer ratios over raw counts."
  ddl: |
    CREATE TABLE acs_sex_by_age ( zcta VARCHAR, total_population REAL, num_male REAL, num_male_under_5_years REAL, num_male_5_to_9_years	REAL, num_male_10_to_14_years	REAL, num_male_15_to_17_years	REAL, num_male_18_and_19_years REAL, num_male_20_years 	REAL, num_male_21_years 	REAL, num_male_22_to_24_years	REAL, num_male_25_to_29_years REAL, num_male_30_to_34_years	REAL, num_male_35_to_39_years	REAL, num_male_40_to_44_years	REAL, num_male_45_to_49_years	REAL, num_male_50_to_54_years	REAL, num_male_55_to_59_years	REAL, num_male_60_and_61_years	REAL, num_male_62_to_64_years	REAL, num_male_65_and_66_years	REAL, num_male_67_to_69_years	REAL, num_male_70_to_74_years	REAL, num_male_75_to_79_years	REAL, num_male_80_to_84_years	REAL, num_male_85_years_and_over	REAL, num_female	REAL, num_female_under_5_years	REAL, num_female_5_to_9_years	REAL, num_female_10_to_14_years	REAL, num_female_15_to_17_years	REAL, num_female_18_and_19_years	REAL, num_female_20_years	REAL, num_female_21_years	REAL, num_female_22_to_24_years	REAL, num_female_25_to_29_years	REAL, num_female_30_to_34_years	REAL, num_female_35_to_39_years	REAL, num_female_40_to_44_years	REAL, num_female_45_to_49_years	REAL, num_female_50_to_54_years	REAL, num_female_55_to_59_years	REAL, num_female_60_and_61_years	REAL, num_female_62_to_64_years	REAL, num_female_65_and_66_years REAL, num_female_67_to_69_years	REAL, num_female_70_to_74_years	REAL, num_female_75_to_79_years	REAL, num_female_80_to_84_years	REAL, num_female_85_years_and_over REAL);
    CREATE TABLE acs_race ( zcta VARCHAR, total_population	REAL, num_white_alone	REAL, num_black_or_african_american_alone	REAL, num_american_indian_and_alaska_native_alone	REAL, num_asian_alone	REAL, num_native_hawaiian_and_other_pacific_islander_alone	REAL, num_some_other_race_alone	REAL, num_two_or_more_races	REAL, num_two_or_more_races_two_races_including_some_other_race	REAL, num_two_or_more_races_two_races_excluding_some_other_race_and_three_or_more_races	REAL) ;
    CREATE TABLE acs_hispanic ( zcta VARCHAR, total_population	REAL, num_not_hispanic_or_latino	REAL, num_not_hispanic_or_latino_white_alone	REAL, num_not_hispanic_or_latino_black_or_african_american_alone	REAL, num_not_hispanic_or_latino_american_indian_and_alaska_native_alone	REAL, num_not_hispanic_or_latino_asian_alone	REAL, num_not_hispanic_or_latino_native_hawaiian_and_other_pacific_islander_alone	REAL, num_not_hispanic_or_latino_some_other_race_alone	REAL, num_not_hispanic_or_latino_two_or_more_races	REAL, num_not_hispanic_or_latino_two_or_more_races_two_races_including_some_other_race	REAL, num_not_hispanic_or_latino_two_or_more_races_two_races_excluding_some_other_race_and_three_or_more_races	REAL, num_hispanic_or_latino	REAL, num_hispanic_or_latino_white_alone	REAL, num_hispanic_or_latino_black_or_african_american_alone	REAL, num_hispanic_or_latino_american_indian_and_alaska_native_alone	REAL, num_hispanic_or_latino_asian_alone	REAL, num_hispanic_or_latino_native_hawaiian_and_other_pacific_islander_alone	REAL, num_hispanic_or_latino_some_other_race_alone	REAL, num_hispanic_or_latino_two_or_more_races	REAL, num_hispanic_or_latino_two_or_more_races_two_races_including_some_other_race	REAL, num_hispanic_or_latino_two_or_more_races_two_races_excluding_some_other_race_and_three_or_more_races	REAL);
    CREATE TABLE acs_commute_times ( zcta VARCHAR, total_commuter_population	REAL, num_less_than_5_minutes	REAL, num_5_to_9_minutes	REAL, num_10_to_14_minutes	REAL, num_15_to_19_minutes	REAL, num_20_to_24_minutes	REAL, num_25_to_29_minutes	REAL, num_30_to_34_minutes	REAL, num_35_to_39_minutes	REAL, num_40_to_44_minutes	REAL, num_45_to_59_minutes	REAL, num_60_to_89_minutes	REAL, num_90_or_more_minutes	REAL);
    CREATE TABLE acs_employment_by_industry ( zcta VARCHAR, total_working_population REAL, num_agriculture_forestry_fishing_and_hunting_and_mining REAL, num_construction REAL, num_manufacturing REAL, num_transportation_and_warehousing_and_utilities REAL, num_information REAL, num_finance_and_insurance_and_real_estate_and_rental_and_leasing REAL, num_professional_scientific_and_management_and_administrative_and_waste_management_services REAL, num_educational_services_and_health_care_and_social_assistance REAL, num_arts_entertainment_and_recreation_and_accommodation_and_food_services REAL, num_other_services REAL, num_public_administration REAL, num_armed_forces REAL);
    CREATE TABLE acs_commute_modes ( zcta VARCHAR, total_working_population	REAL, num_drove_alone	REAL, num_drove_alone_agriculture_forestry_fishing_and_hunting_and_mining	REAL, num_drove_alone_construction	REAL, num_drove_alone_manufacturing	REAL, num_drove_alone_wholesale_trade	REAL, num_drove_alone_retail_trade	REAL, num_drove_alone_transportation_and_warehousing_and_utilities	REAL, num_drove_alone_information	REAL, num_drove_alone_finance_and_insurance_and_real_estate_and_rental_and_leasing	REAL, num_drove_alone_professional_scientific_and_management_and_administrative_and_waste_management_services	REAL, num_drove_alone_educational_services_and_health_care_and_social_assistance	REAL, num_drove_alone_arts_entertainment_and_recreation_and_accommodation_and_food_services	REAL, num_drove_alone_other_services_	REAL, num_drove_alone_public_administration	REAL, num_drove_alone_armed_forces	REAL, num_carpooled	REAL, num_carpooled_agriculture_forestry_fishing_and_hunting_and_mining	REAL, num_carpooled_construction	REAL, num_carpooled_manufacturing	REAL, num_carpooled_wholesale_trade	REAL, num_carpooled_retail_trade	REAL, num_carpooled_transportation_and_warehousing_and_utilities	REAL, num_carpooled_information	REAL, num_carpooled_finance_and_insurance_and_real_estate_and_rental_and_leasing	REAL, num_carpooled_professional_scientific_and_management_and_administrative_and_waste_management_services	REAL, num_carpooled_educational_services_and_health_care_and_social_assistance	REAL, num_carpooled_arts_entertainment_and_recreation_and_accommodation_and_food_services	REAL, num_carpooled_other_services_	REAL, num_carpooled_public_administration	REAL, num_carpooled_armed_forces	REAL, num_public_transportation	REAL, num_public_transportation_agriculture_forestry_fishing_and_hunting_and_mining	REAL, num_public_transportation_construction	REAL, num_public_transportation_manufacturing	REAL, num_public_transportation_wholesale_trade	REAL, num_public_transportation_retail_trade	REAL, num_public_transportation_transportation_and_warehousing_and_utilities	REAL, num_public_transportation_information	REAL, num_public_transportation_finance_and_insurance_and_real_estate_and_rental_and_leasing	REAL, num_public_transportation_professional_scientific_and_management_and_administrative_and_waste_management_services	REAL, num_public_transportation_educational_services_and_health_care_and_social_assistance	REAL, num_public_transportation_arts_entertainment_and_recreation_and_accommodation_and_food_services	REAL, num_public_transportation_other_services_except_public_administration	REAL, num_public_transportation_public_administration	REAL, num_public_transportation_armed_forces	REAL, 	REAL, num_walked_agriculture_forestry_fishing_and_hunting_and_mining	REAL, num_walked_construction	REAL, num_walked_manufacturing	REAL, num_walked_wholesale_trade	REAL, num_walked_retail_trade	REAL, num_walked_transportation_and_warehousing_and_utilities	REAL, num_walked_information	REAL, num_walked_finance_and_insurance_and_real_estate_and_rental_and_leasing	REAL, num_walked_professional_scientific_and_management_and_administrative_and_waste_management_services	REAL, num_walked_educational_services_and_health_care_and_social_assistance	REAL, num_walked_arts_entertainment_and_recreation_and_accommodation_and_food_services	REAL, num_walked_other_services_	REAL, num_walked_public_administration	REAL, num_walked_armed_forces	REAL, num_taxicab_motorcycle_bicycle_or_other	REAL, num_taxicab_motorcycle_bicycle_or_other_agriculture_forestry_fishing_and_hunting_and_mining	REAL, num_taxicab_motorcycle_bicycle_or_other_construction	REAL, num_taxicab_motorcycle_bicycle_or_other_manufacturing	REAL, num_taxicab_motorcycle_bicycle_or_other_wholesale_trade	REAL, num_taxicab_motorcycle_bicycle_or_other_retail_trade	REAL, num_taxicab_motorcycle_bicycle_or_other_transportation_and_warehousing_and_utilities	REAL, num_taxicab_motorcycle_bicycle_or_other_information	REAL, num_taxicab_motorcycle_bicycle_or_other_finance_and_insurance_and_real_estate_and_rental_and_leasing	REAL, num_taxicab_motorcycle_bicycle_or_other_professional_scientific_and_management_and_administrative_and_waste_management_services	REAL, num_taxicab_motorcycle_bicycle_or_other_educational_services_and_health_care_and_social_assistance	REAL, num_taxicab_motorcycle_bicycle_or_other_arts_entertainment_and_recreation_and_accommodation_and_food_services	REAL, num_taxicab_motorcycle_bicycle_or_other_other_services_	REAL, num_taxicab_motorcycle_bicycle_or_other_public_administration	REAL, num_taxicab_motorcycle_bicycle_or_other_armed_forces	REAL, num_worked_from_home	REAL, num_worked_from_home_agriculture_forestry_fishing_and_hunting_and_mining	REAL, num_worked_from_home_construction	REAL, num_worked_from_home_manufacturing	REAL, num_worked_from_home_wholesale_trade	REAL, num_worked_from_home_retail_trade	REAL, num_worked_from_home_transportation_and_warehousing_and_utilities	REAL, num_worked_from_home_information	REAL, num_worked_from_home_finance_and_insurance_and_real_estate_and_rental_and_leasing	REAL, num_worked_from_home_professional_scientific_and_management_and_administrative_and_waste_management_services	REAL, num_worked_from_home_educational_services_and_health_care_and_social_assistance	REAL, num_worked_from_home_arts_entertainment_and_recreation_and_accommodation_and_food_services	REAL, num_worked_from_home_other_services_	REAL, num_worked_from_home_public_administration	REAL, num_worked_from_home_armed_forces	REAL);
    CREATE TABLE acs_education_subjects ( zcta VARCHAR, total_num_bachelors_holders	REAL, num_science_and_engineering_computers_mathematics_and_statistics	REAL, num_science_and_engineering_biological_agricultural_and_environmental_sciences	REAL, num_science_and_engineering_physical_and_related_sciences	REAL, num_science_and_engineering_psychology	REAL, num_science_and_engineering_social_sciences	REAL, num_science_and_engineering_engineering	REAL, num_science_and_engineering_multidisciplinary_studies	REAL, num_science_and_engineering_related_fields	REAL, num_business	REAL, num_education	REAL, num_arts_humanities_and_other_literature_and_languages	REAL, num_arts_humanities_and_other_liberal_arts_and_history	REAL, num_arts_humanities_and_other_visual_and_performing_arts	REAL, num_arts_humanities_and_other_communications	REAL, num_arts_humanities_and_other_other	REAL);
    CREATE TABLE acs_housing_year_built ( zcta VARCHAR, total_structures	REAL, num_built_2020_or_later	REAL, num_built_2010_to_2019	REAL, num_built_2000_to_2009	REAL, num_built_1990_to_1999	REAL, num_built_1980_to_1989	REAL, num_built_1970_to_1979	REAL, num_built_1960_to_1969	REAL, num_built_1950_to_1959	REAL, num_built_1940_to_1949	REAL, num_built_1939_or_earlier	REAL);
    CREATE TABLE acs_poverty_status ( zcta VARCHAR, total_households	REAL, num_income_in_the_past_12_months_below_poverty_level	REAL, num_income_in_the_past_12_months_below_poverty_level_under_6_years	REAL, num_income_in_the_past_12_months_below_poverty_level_6_to_11_years	REAL, num_income_in_the_past_12_months_below_poverty_level_12_to_17_years	REAL, num_income_in_the_past_12_months_below_poverty_level_18_to_59_years	REAL, num_income_in_the_past_12_months_below_poverty_level_60_to_74_years	REAL, num_income_in_the_past_12_months_below_poverty_level_75_to_84_years	REAL, num_income_in_the_past_12_months_below_poverty_level_85_years_and_over	REAL, num_income_in_the_past_12_months_at_or_above_poverty_level	REAL, num_income_in_the_past_12_months_at_or_above_poverty_level_under_6_years	REAL, num_income_in_the_past_12_months_at_or_above_poverty_level_6_to_11_years	REAL, num_income_in_the_past_12_months_at_or_above_poverty_level_12_to_17_years	REAL, num_income_in_the_past_12_months_at_or_above_poverty_level_18_to_59_years	REAL, num_income_in_the_past_12_months_at_or_above_poverty_level_60_to_74_years	REAL, num_income_in_the_past_12_months_at_or_above_poverty_level_75_to_84_years	REAL, num_income_in_the_past_12_months_at_or_above_poverty_level_85_years_and_over	REAL);
    CREATE TABLE acs_ratio_of_income_to_poverty_level ( zcta VARCHAR, total_households	REAL, num_under_50_pct	REAL, num_50_to_74_pct	REAL, num_75_to_99_pct	REAL, num_100_to_124_pct	REAL, num_125_to_149_pct	REAL, num_150_to_174_pct	REAL, num_175_to_184_pct	REAL, num_185_to_199_pct	REAL, num_200_to_299_pct	REAL, num_300_to_399_pct	REAL, num_400_to_499_pct	REAL, num_500_pct_and_over	REAL);
    CREATE TABLE acs_earners_in_household ( zcta VARCHAR, total_num_earners FLOAT, num_no_earners FLOAT, num_1_earner FLOAT, num_2_earners FLOAT, num_3_or_more_earners FLOAT);
    CREATE TABLE acs_housing ( zcta TEXT, num_housing_units	REAL, num_heated_by_utility_gas	REAL, num_heated_by_bottled_tank_or_lp_gas	REAL, num_heated_by_electricity	REAL, num_heated_by_fuel_oil_kerosene_etc	REAL, num_heated_by_coal_or_coke	REAL, num_heated_by_wood	REAL, num_heated_by_solar_energy	REAL, num_heated_by_other_fuel	REAL, num_heated_by_no_fuel_used	REAL, num_owner_occupied	REAL, num_renter_occupied	REAL, num_complete_kitchen_facilities	REAL, num_lacking_complete_kitchen_facilities	REAL, aggregate_gross_rent	REAL, aggregate_price_asked	REAL, median_home_value	REAL, num_housing_units_with_a_mortgage	REAL, num_housing_units_with_a_mortgage_with_no_second_mortgage	REAL, num_housing_units_without_a_mortgage	REAL, total_not_charged_not_used_or_payment_included_in_other_fees	REAL, total_charged_for_electricity	REAL, total_charged_for_electricity_less_than_usd_50	REAL, total_charged_for_electricity_usd_50_to_usd_99	REAL, total_charged_for_electricity_usd_100_to_usd_149	REAL, total_charged_for_electricity_usd_150_to_usd_199	REAL, total_charged_for_electricity_usd_200_to_usd_249	REAL, total_charged_for_electricity_usd_250_or_more	REAL, total_not_charged_or_payment_included_in_other_fees	REAL, total_charged_for_water_and_sewer	REAL, total_charged_for_water_and_sewer_less_than_usd_125	REAL, total_charged_for_water_and_sewer_usd_125_to_usd_249	REAL, total_charged_for_water_and_sewer_usd_250_to_usd_499	REAL, total_charged_for_water_and_sewer_usd_500_to_usd_749	REAL, total_charged_for_water_and_sewer_usd_750_to_usd_999	REAL, total_charged_for_water_and_sewer_usd_1000_or_more	REAL, num_has_one_or_more_types_of_computing_devices	REAL, num_has_one_or_more_types_of_computing_devices_desktop_or_laptop	REAL, num_no_computer	REAL) ;
    CREATE TABLE acs_medicare ( zcta TEXT, total_pop	REAL, num_allocated_medicare	REAL, num_not_allocated_medicare	REAL);
    CREATE TABLE acs_gross_rent_household_income_ratio ( zcta VARCHAR, num_hh_less_than_10pct	REAL, num_hh_10pct_to_15pct	REAL, num_hh_15pct_to_20pct	REAL, num_hh_20pct_to_25pct	REAL, num_hh_25pct_to_30pct	REAL, num_hh_30pct_to_35pct	REAL, num_hh_35pct_to_40pct	REAL, num_hh_40pct_to_45pct	REAL, num_hh_45pct_to_50pct	REAL, num_hh_50pct_or_more	REAL, num_hh_ratio_not_computed	REAL);
    CREATE TABLE acs_household_size_by_vehicles_available ( zcta STRING, num_hh REAL, num_hh_0_vehicles REAL, num_hh_1_vehicle REAL, num_hh_2_vehicles REAL, num_hh_3_vehicles REAL, num_hh_4_or_more_vehicles REAL, num_1_person_hh REAL, num_1_person_hh_0_vehicles REAL, num_1_person_hh_1_vehicles REAL, num_1_person_hh_2_vehicles REAL, num_1_person_hh_3_vehicles REAL, num_1_person_hh_4_or_more_vehicles REAL, num_2_person_hh REAL, num_2_person_hh_no_vehicle REAL, num_2_person_hh_1_vehicle REAL, num_2_person_hh_2_vehicles REAL, num_2_person_hh_3_vehicles REAL, num_2_person_hh_4_or_more_vehicles REAL, num_3_person_hh REAL, num_3_person_hh_no_vehicle REAL, num_3_person_hh_1_vehicle REAL, num_3_person_hh_2_vehicles REAL, num_3_person_hh_3_vehicles REAL, num_3_person_hh_4_or_more_vehicles REAL, num_4_or_more_person_hh REAL, num_4_or_more_person_hh_no_vehicle REAL, num_4_or_more_person_hh_1_vehicle REAL, num_4_or_more_person_hh_2_vehicles REAL, num_4_or_more_person_hh_3_vehicles REAL, num_4_or_more_person_hh_4_or_more_vehicles REAL);
    CREATE TABLE acs_aggregates ( zcta STRING, aggregate_minutes_traveled_to_work REAL, aggregate_number_of_vehicles_used_to_commute REAL, aggregate_household_earnings_within_last_year REAL, aggregate_real_estate_taxes_paid REAL, aggregate_home_value_usd REAL, aggregate_gross_rent REAL, aggregate_number_of_rooms REAL, aggregate_number_of_vehicles_available REAL, aggregate_contract_rent REAL, total_population_if_over_16_years REAL, total_num_bachelors_holders REAL, total_structures REAL, total_population REAL, total_households REAL);
