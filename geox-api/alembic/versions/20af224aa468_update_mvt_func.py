"""Add tile function

Revision ID: 20af224aa468
Revises: 996651db0723
Create Date: 2023-01-09 13:21:46.845561

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = '20af224aa468'
down_revision = '996651db0723'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_generate_shape_tile = PGFunction(
        schema="public",
        signature="generate_shape_tile(z integer, x integer, y integer, filter_organization_id uuid, namespace_ids uuid[])",
        definition='returns bytea\n LANGUAGE plpgsql\n STABLE PARALLEL SAFE\nAS $function$\nDECLARE\n    result bytea;\nBEGIN\n    WITH\n    bounds AS (\n      SELECT ST_TileEnvelope(z, x, y) AS geom\n    )\n    , mvtgeom AS (\n      SELECT ST_AsMVTGeom(ST_Transform(sh.geom, 3857), bounds.geom) AS geom\n      , sh.properties - \'__uuid\' AS properties\n      , sh.uuid AS "__uuid"\n      , sh.namespace_id AS "__namespace_id"\n      FROM public.shapes sh, bounds\n      WHERE 1=1\n        AND sh.organization_id = filter_organization_id\n        AND sh.deleted_at IS NULL\n        AND ST_Intersects(sh.geom, ST_Transform(bounds.geom, 4326))\n\t-- If the namespace parameter is empty, get all data\n\tAND COALESCE(namespace_id = ANY(namespace_ids), TRUE)\n    )\n    SELECT ST_AsMVT(mvtgeom.*)::bytea\n    INTO result\n    FROM mvtgeom\n    ;\n\n    RETURN result\n    ;\nEND;\n$function$'
    )
    op.create_entity(public_generate_shape_tile)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_generate_shape_tile = PGFunction(
        schema="public",
        signature="generate_shape_tile(z integer, x integer, y integer, filter_organization_id uuid, namespace_ids uuid[])",
        definition='returns bytea\n LANGUAGE plpgsql\n STABLE PARALLEL SAFE\nAS $function$\nDECLARE\n    result bytea;\nBEGIN\n    WITH\n    bounds AS (\n      SELECT ST_TileEnvelope(z, x, y) AS geom\n    )\n    , mvtgeom AS (\n      SELECT ST_AsMVTGeom(ST_Transform(sh.geom, 3857), bounds.geom) AS geom\n      , sh.properties - \'__uuid\' AS properties\n      , sh.uuid AS "__uuid"\n      , sh.namespace_id AS "__namespace_id"\n      FROM public.shapes sh, bounds\n      WHERE 1=1\n        AND sh.organization_id = filter_organization_id\n        AND sh.deleted_at IS NULL\n        AND ST_Intersects(sh.geom, ST_Transform(bounds.geom, 4326))\n\t-- If the namespace parameter is empty, get all data\n\tAND COALESCE(namespace_id = ANY(namespace_ids), TRUE)\n    )\n    SELECT ST_AsMVT(mvtgeom.*)::bytea\n    INTO result\n    FROM mvtgeom\n    ;\n\n    RETURN result\n    ;\nEND;\n$function$'
    )
    op.drop_entity(public_generate_shape_tile)

    # ### end Alembic commands ###
