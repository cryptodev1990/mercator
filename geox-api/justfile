# Command runner for Mercator backend
# This is a [justfile](https://github.com/casey/juste)

# set the default shell (to be safe)
set shell := ["bash", "-uc"]

git_commit_hash := `git rev-parse HEAD`

default:
	@just --list

## Deploy

# Deploy the project to flyctl
deploy:
	#!/usr/bin/env zsh
	set -e
	if (( !$+commands[flyctl] ))
	then
		echo "\033[31m Please install flyctl from fly.io" 1>&2
		exit 1
	fi
	# same check run by R devtools for uncommitted changes
	if [[ -n "$(git status --porcelain=v1)" ]]
	then
		echo "Commit all changes before deploying" 1>&2
		exit 1
	fi
	flyctl deploy --build-arg "git_commit_hash={{ git_commit_hash }}" --dockerfile "Dockerfile"


## Docker commands

### Build docker self-contained image

# Build docker container
docker-build:
	docker-compose -f docker-compose.yml --env-file .env.docker build

# Run Docker container
docker-up: docker-build
	docker-compose -f docker-compose.yml --env-file .env.docker up

# Delete docker database volume
docker-delete-db:
	docker volume rm geox-api_geox-app-db-data

# Connect to local docker
docker-connect +COMMAND='app bash':
	docker-compose -f docker-compose.yml --env-file .env.docker exec {{ COMMAND }}

# Connect to local docker
docker-run +COMMAND='app bash':
	docker-compose -f docker-compose.yml --env-file .env.docker run {{ COMMAND }}

### Build docker local file image

# Build docker container
dev-docker-build:
	docker-compose --env-file .env.docker build

# Run Docker container
dev-docker-up: dev-docker-build
	#!/usr/bin/env zsh
	if [[ -f ".overmind.sock" ]]
	then
		echo ".overmind.sock exists" 1>&2
		exit 1
	fi
	docker-compose --env-file .env.docker up

# Delete docker database volume
dev-docker-delete-db:
	docker volume rm geox-api_geox-app-db-data-dev

# Connect to local docker
dev-docker-connect +COMMAND='app bash':
	docker-compose --env-file .env.docker exec {{ COMMAND }}

# Connect to local docker
dev-docker-run +COMMAND='app bash':
	docker-compose --env-file .env.docker run {{ COMMAND }}

## Local development (OSX)

# Clean and recreate local dev database
dev-db-clean:
	dropdb geox
	echo "DROP ROLE IF EXISTS app_user" | psql
	createdb geox

# Install dependencies for local development
dev-install:
	./bin/install-dependencies-local.sh

# Run app locally
dev:
	ENV_FILE=.env.local APP_RELOAD=1 overmind start

# Connect to running local postgres database
pg:
	pgcli -p5432 "geox"

# Connect to running local postgres database
pg-osm:
	pgcli -p5432 "osm" -u "osmuser"

# Connect to production Postgres
pg-prod:
	fly pg connect -a restless-rain-538-db

# Run an interactive shell for the project
shell:
	ENV_FILE=.env.local ipython

## Developer experience stuff

# Lint the project
lint: ## Lint the project
	./bin/lint.sh

# Run tests
test *FLAGS="-x -vvv .":
	ENV_FILE=.env.local ./bin/test-local.sh {{ FLAGS }}

# Run tests against local, non-Dockerized database
test-local-db *FLAGS=".":
	ENV_FILE=.env.local ./tests-start.sh {{ FLAGS }}

## Alembic

# Revise database with alembic
db-revision message *FLAGS:
	#!/usr/bin/env zsh
	set -e
	echo "Check that all the models were included in app/db/base.py"
	echo "--- Start of app/db/base.py"
	cat ./app/db/base.py
	echo "--- End of app/db/base.py"
	ENV_FILE=.env.local alembic revision --autogenerate -m "{{ message }}" {{ FLAGS }}

# Remove untracked alembic versions
alembic-clean:
	git clean -f -- ./alembic/versions/*.py

# Upgrade database schema with alembic
db-upgrade:
	ENV_FILE=.env.local alembic upgrade head

# Downgrade database schema with alembic
db-downgrade:
	ENV_FILE=.env.local alembic downgrade -1

# Get access token for Auth0 API, useful for using the Swagger docs generated by FastAPI
access-token:
	ENV_FILE=.env.local python -m app.core.access_token | pbcopy;
	@echo Access token copied to clipboard

# Run an interactive shell for the project
ssh:
	fly ssh console

## Create empty .env files
create-dotenv:
	PYTHONPATH=. settings-doc generate --class app.core.config.Settings --output-format dotenv > .env.local
	PYTHONPATH=. settings-doc generate --class app.core.config.Settings --output-format dotenv > .env.docker
