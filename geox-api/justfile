# Command runner for Mercator backend
# This is a [justfile](https://github.com/casey/juste)

# set the default shell (to be safe)
set shell := ["bash", "-uc"]

# Assumes that local environment
set dotenv-load

git_commit_hash := `git rev-parse HEAD`


default:
	@just --list

# Build docker container
docker-build:
	docker-compose build

# Run Docker container
docker-run: docker-build
	# Run the production container
	docker-compose up

# Connect to local docker
docker-connect:
	docker-compose exec app bash

# Install dependencies for local development
dev-install:
	./bin/install-dependencies-local.sh

# Run app locally
dev:
	overmind start

# Format files in the project
format:
	./bin/format.sh

# Lint the project
lint: ## Lint the project
	./bin/lint.sh

# Deploy the project to flyctl
deploy:
	#!/usr/bin/env zsh
	set -e
	if (( !$+commands[flyctl] ))
	then
		echo "\033[31m Please install flyctl from fly.io" 1>&2
		exit 1
	fi
	# same check run by R devtools for uncommitted changes
	if [[ -n "$(git status --porcelain=v1)" ]]
	then
		echo "Commit all changes before deploying" 1>&2
		exit 1
	fi
	flyctl deploy --build-arg "git_commit_hash={{ git_commit_hash }}" --dockerfile "Dockerfile"

# Run tests
test *FLAGS=".":
	./bin/test.sh {{ FLAGS }}

# Revise database with alembic
db-revision message *FLAGS:
	#!/usr/bin/env zsh
	set -e
	echo "Check that all the models were included in app/db/base.py"
	echo "--- Start of app/db/base.py"
	cat ./app/db/base.py
	echo "--- End of app/db/base.py"
	alembic revision --autogenerate -m {{ message }} {{ FLAGS }}

# Remove untracked alembic versions
alembic-clean:
	git clean -f -- ./alembic/versions/*.py

# Upgrade database schema with alembic
db-upgrade:
	alembic upgrade head

# Connect to running local postgres database
pg:
	pgcli -p5432 "geox"

# Connect to running local postgres database
pg-osm:
	pgcli -p5432 "osm" -u "osmuser"

# Run an interactive shell for the project
shell:
	ipython

# Get access token for Auth0 API, useful for using the Swagger docs generated by FastAPI
access-token:
	python -c "from app.core.access_token import get_access_token; print(get_access_token())" | pbcopy;
	@echo Access token copied to clipboard

# Run an interactive shell for the project
ssh:
	fly ssh console
