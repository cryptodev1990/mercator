# Makefile to build and run Mercator GeoX app
#
# This is a self-documenting makefile. See
# Self documenting makefile https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html

SHELL := bash
.DEFAULT_GOAL := help

LOCAL_ENV_FILE := .env.local
DOCKER_ENV_FILE := .env.docker


.PHONY: help
help:  ## Display available tasks
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: docker-build
docker-build: ## Build docker container
	docker-compose build

.PHONY: docker-run
docker-run: docker-build ## Run docker container
	# Run the production container
	docker-compose up

.PHONY: docker-connect
docker-connect: ## Connect to local docker
	docker-compose exec app bash

.PHONY: dev-install
dev-install:  ## Install dependencies for local development
	./bin/install-dependencies-local.sh

.PHONY: dev
dev:  ## Run app locally
	ENV_FILE=$(LOCAL_ENV_FILE) APP_RELOAD=1 ./bin/run-with-env.sh overmind start

.PHONY: format
format: ## Format files in the project
	./bin/format.sh

.PHONY: lint
lint: ## Lint the project
	./bin/lint.sh

.PHONY: deploy
deploy: ## Deploy the project to flyctl
	test `command -v flyctl` || (echo "\033[31m Please install flyctl from fly.io" && exit -1);
	flyctl deploy

.PHONY: test
test: ## Run tests
	ENV_FILE=$(LOCAL_ENV_FILE) ./bin/run-with-env.sh ./bin/test.sh .

.PHONY: db-revision
db-revision: ## Revise database with alembic
	ENV_FILE=$(LOCAL_ENV_FILE) ./bin/run-with-env.sh alembic revision --autogenerate -m "Add users and shapes"

.PHONY: db-upgrade
db-upgrade:  ## Upgrade database schema with alembic
	ENV_FILE=$(LOCAL_ENV_FILE) ./bin/run-with-env.sh alembic upgrade head

.PHONY: pg
pg: ## Connect to running local postgres database
	psql -p5432 "geox"

.PHONY: shell
shell:  ## Run an interactive shell for the project
	ENV_FILE=$(LOCAL_ENV_FILE) ./bin/run-with-env.sh PYTHONPATH=. ipython

.PHONY: access-token
access-token:  ## Get access token for Auth0 API, useful for using the Swagger docs generated by FastAPI
	ENV_FILE=$(LOCAL_ENV_FILE) ./bin/run-with-env.sh python -c "from app.core.access_token import get_access_token; print(get_access_token())" | pbcopy;
	@echo Access token copied to clipboard

.PHONY: ssh
ssh:  ## Run an interactive shell for the project
	fly ssh console
